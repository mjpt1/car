version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: car-booking-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_strong_password}
      POSTGRES_DB: ${DB_NAME:-car_booking_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: car-booking-backend
    depends_on:
      - db
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=db # Service name in Docker network
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-your_strong_password}
      - DB_NAME=${DB_NAME:-car_booking_db}
      - DB_PORT=5432
      - JWT_SECRET=${JWT_SECRET:-your_super_secret_and_strong_jwt_key}
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "3001:3001"
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: car-booking-frontend
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:3001/api # Accessed from user's browser
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:3001
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
